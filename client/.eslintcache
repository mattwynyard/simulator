[{"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\index.js":"1","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\App.js":"2","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1619062860011,"results":"4","hashOfConfig":"5"},{"size":4701,"mtime":1619157594784,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1619062860013,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"5c9jyf",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\index.js",[],["16","17"],"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\App.js",["18","19"],"import './App.css';\r\nimport { MapContainer, TileLayer, CircleMarker, ScaleControl, useMap} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport React, { useState, useEffect} from 'react';\r\n\r\nfunction MapRef(props) {\r\n\r\n  const map = useMap();\r\n  if (props.center.length !== 0) {\r\n    map.panTo(props.center[0])\r\n  }\r\n  return null\r\n}\r\n\r\nfunction CustomTileLayer(props) {\r\n  if (props.isRemote) {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"http://localhost:5000/auckland/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [initialise, setIntialise] = useState(false);\r\n  const [isRemote] = useState(false);\r\n  const [position, setPosition] = useState([]);\r\n  const [center, setCenter] = useState([-36.81835, 174.74581]);\r\n  const [points, setPoints] = useState([]);\r\n  const [host] = useState(\"localhost:5000\");\r\n  const [timerInterval] = useState(500);\r\n\r\n  const getData = async () => {      \r\n    try {\r\n        const response = await fetch(\"http://\" + host + '/position', {\r\n            method: 'GET',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',        \r\n            },      \r\n        });\r\n        if (response.ok) {\r\n            const body = await response.json();\r\n            return body; \r\n        } else {\r\n            \r\n            return Error(response);\r\n        }\r\n    } catch {\r\n        return new Error(\"connection error\")\r\n    }      \r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n        const id = setInterval(() => {\r\n        setCounter(counter + 1); \r\n        getData().then(data => {\r\n            if (data.latlng !== null) {\r\n              try {\r\n                //console.log(data.latlng)\r\n                let lat = data.latlng[0];\r\n                let lng = data.latlng[1];\r\n                setPosition([L.latLng(lat, lng)]);\r\n                if (!initialise) {\r\n                  setCenter([L.latLng(lat, lng)]);\r\n                  setIntialise(true);\r\n                }\r\n              } catch {\r\n                console.log(\"position error\");\r\n              }     \r\n            }\r\n            try {\r\n              if (data.faults !== null) {\r\n                console.log(data.faults);\r\n                setPoints(data.faults);\r\n              }\r\n            } catch {\r\n              console.log(\"fault error\")\r\n            }     \r\n        });           \r\n        }, timerInterval);\r\n        return () => {\r\n        clearInterval(id);\r\n        };\r\n    },\r\n    [counter, getData, timerInterval, initialise],\r\n);\r\n\r\nuseEffect(\r\n  () => {\r\n    if (counter % 10 === 0) {\r\n      setCenter(position);\r\n    }\r\n  },\r\n  [position],\r\n);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <MapContainer \r\n            className=\"map\" \r\n            center={center} \r\n            zoom={18} \r\n            minZoom={1}\r\n            maxZoom={18}\r\n            scrollWheelZoom={true}\r\n            keyboard={true}\r\n            eventHandlers={{\r\n                load: () => {\r\n                  console.log('onload')\r\n                },\r\n              }}\r\n        >\r\n        <CustomTileLayer isRemote={isRemote}/>\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n         {position.map((position, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              center={position}\r\n              radius ={5}\r\n              fill={true}\r\n              fillOpacity={1.0}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n              }}\r\n              >        \r\n            </CircleMarker>\r\n          )}\r\n          \r\n          {points.map((position, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              center={L.latLng(position.latlng[0], position.latlng[1])}\r\n              radius ={4}\r\n              fill={true}\r\n              color={\"red\"}\r\n              fillOpacity={1.0}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n              }}\r\n              >        \r\n            </CircleMarker>\r\n          )} \r\n          <MapRef center={center}></MapRef>\r\n         </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":45,"column":9,"nodeType":"26","endLine":65,"endColumn":4},{"ruleId":"24","severity":1,"message":"27","line":109,"column":3,"nodeType":"28","endLine":109,"endColumn":13,"suggestions":"29"},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"react-hooks/exhaustive-deps","The 'getData' function makes the dependencies of useEffect Hook (at line 100) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'getData' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'counter'. Either include it or remove the dependency array.","ArrayExpression",["32"],"no-global-assign","no-unsafe-negation",{"desc":"33","fix":"34"},"Update the dependencies array to be: [counter, position]",{"range":"35","text":"36"},[3074,3084],"[counter, position]"]