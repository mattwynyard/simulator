[{"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\index.js":"1","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\App.js":"2","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\reportWebVitals.js":"3","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\AntDrawer.js":"4"},{"size":517,"mtime":1619062860011,"results":"5","hashOfConfig":"6"},{"size":5903,"mtime":1619988639830,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1619062860013,"results":"8","hashOfConfig":"6"},{"size":1744,"mtime":1619989156900,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5c9jyf",{"filePath":"13","messages":"14","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\index.js",[],["20","21"],"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\App.js",["22","23","24","25","26","27","28"],"import './App.css';\r\nimport AntDrawer from'./AntDrawer.js'\r\nimport { MapContainer, TileLayer, CircleMarker, Polyline, Popup, ScaleControl, useMap} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport React, { useState, useEffect, useCallback, useRef} from 'react';\r\n\r\nfunction MapRef(props) {\r\n  const [counter, setCounter] = useState(0);\r\n  const map = useMap();\r\n  useEffect(\r\n    () => {\r\n        const id = setInterval(() => {\r\n          setCounter(counter + 1);    \r\n          let bounds = map.getBounds();\r\n          //console.log(bounds)\r\n        }, 10000);\r\n        return () => {\r\n          clearInterval(id);\r\n        };\r\n    },\r\n    [counter],\r\n    );\r\n    if (props.center.length !== 0) {\r\n      map.panTo(props.center[0])\r\n    }\r\n    return null\r\n  }\r\n\r\nfunction CustomTileLayer(props) {\r\n  if (props.isRemote) {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"http://localhost:5000/auckland/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [initialise, setIntialise] = useState(false);\r\n  const [isRemote] = useState(false);\r\n  const [position, setPosition] = useState([]);\r\n  const [center, setCenter] = useState([-36.81835, 174.74581]);\r\n  const [points, setPoints] = useState([]);\r\n  const [lines, setLines] = useState([]);\r\n  const [host] = useState(\"localhost:5000\");\r\n  const [timerInterval] = useState(500);\r\n\r\n  const getData = useCallback(async () => {      \r\n    try {\r\n        const response = await fetch(\"http://\" + \"localhost:5000\" + '/position', {\r\n            method: 'GET',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',        \r\n            },      \r\n        });\r\n        if (response.ok) {\r\n            const body = await response.json();\r\n            return body; \r\n        } else {\r\n            \r\n            return Error(response);\r\n        }\r\n    } catch {\r\n        return new Error(\"connection error\")\r\n    }      \r\n  }, []);\r\n  \r\n\r\n  useEffect(\r\n    () => {\r\n        const id = setInterval(() => {\r\n        setCounter(counter + 1);\r\n        \r\n          getData().then(data => {\r\n              if (data.latlng) {\r\n                try{\r\n                  let lat = data.latlng[0];\r\n                  let lng = data.latlng[1];\r\n                  setPosition([L.latLng(lat, lng)]);\r\n                  if (!initialise) {\r\n                    setCenter([L.latLng(lat, lng)]);\r\n                    setIntialise(true);\r\n                  }\r\n                } catch {\r\n                  console.log(\"position error\");\r\n                }     \r\n              }\r\n              if (data.faults) {\r\n                try {\r\n                    setPoints(data.faults);      \r\n                } catch (e) {\r\n                  console.log(\"fault error: \" + e)\r\n                } \r\n            }    \r\n          });\r\n        }, timerInterval);\r\n        return () => {\r\n        clearInterval(id);\r\n        };\r\n    },\r\n    [counter, timerInterval, initialise, getData],\r\n);\r\n\r\nuseEffect(\r\n  () => {\r\n    if (counter % 10 === 0) {\r\n      setCenter(position);\r\n    }\r\n  },\r\n  [position, counter],\r\n);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <MapContainer \r\n          className=\"map\" \r\n          center={center} \r\n          zoom={18} \r\n          minZoom={10}\r\n          maxZoom={18}\r\n          scrollWheelZoom={true}\r\n          keyboard={true}\r\n          eventHandlers={{\r\n              load: () => {\r\n                console.log('onload')\r\n              },\r\n            }}\r\n        >\r\n        <CustomTileLayer isRemote={isRemote}/>\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n         {position.map((position, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              stroke={true}\r\n              center={position}\r\n              radius ={6}\r\n              fill={true}\r\n              color={\"#3388ff\"}\r\n              fillColor={\"blue\"}\r\n              fillOpacity={1.0}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n                \r\n              }}\r\n              >      \r\n            </CircleMarker>\r\n          )}\r\n          {points.map((point, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              center={L.latLng(point.latlng[0], point.latlng[1])}\r\n              radius ={point.radius}\r\n              fill={true}\r\n              color={point.color}\r\n              fillColor={point.color}\r\n              fillOpacity={point.opacity}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n                mouseover: (e) => {\r\n                  e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                  e.target.closePopup();\r\n                }\r\n              }}\r\n              > \r\n              <Popup\r\n                key={`marker-${idx}`}>\r\n                  id: {point.id}<br></br>\r\n              </Popup>       \r\n            </CircleMarker>\r\n          )}\r\n          {lines.map((line, idx) =>\r\n            <Polyline\r\n              positions={line.latlngs}\r\n              color={line.color}\r\n            >           \r\n            </Polyline>\r\n          )} \r\n          <MapRef center={center}></MapRef>  \r\n         </MapContainer>\r\n         <AntDrawer className=\"drawer\" ></AntDrawer>\r\n         \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\reportWebVitals.js",[],"C:\\Users\\matt\\Documents\\Onsite\\simulator\\Map\\client\\src\\AntDrawer.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":6,"column":51,"nodeType":"35","messageId":"36","endLine":6,"endColumn":57},{"ruleId":"33","severity":1,"message":"37","line":15,"column":15,"nodeType":"35","messageId":"36","endLine":15,"endColumn":21},{"ruleId":"38","severity":1,"message":"39","line":22,"column":5,"nodeType":"40","endLine":22,"endColumn":14,"suggestions":"41"},{"ruleId":"33","severity":1,"message":"42","line":56,"column":17,"nodeType":"35","messageId":"36","endLine":56,"endColumn":25},{"ruleId":"33","severity":1,"message":"43","line":57,"column":10,"nodeType":"35","messageId":"36","endLine":57,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":62,"column":48,"nodeType":"46","messageId":"47","endLine":62,"endColumn":49},{"ruleId":"44","severity":1,"message":"45","line":62,"column":67,"nodeType":"46","messageId":"47","endLine":62,"endColumn":68},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'bounds' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","ArrayExpression",["50"],"'setLines' is assigned a value but never used.","'host' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [counter, map]",{"range":"53","text":"54"},[683,692],"[counter, map]"]