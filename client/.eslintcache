[{"S:\\Simulator\\Map\\client\\src\\index.js":"1","S:\\Simulator\\Map\\client\\src\\reportWebVitals.js":"2","S:\\Simulator\\Map\\client\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":5437,"mtime":1619486696143,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dc9rqr",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"S:\\Simulator\\Map\\client\\src\\index.js",[],"S:\\Simulator\\Map\\client\\src\\reportWebVitals.js",[],"S:\\Simulator\\Map\\client\\src\\App.js",["15","16","17","18"],"import './App.css';\r\nimport { MapContainer, TileLayer, CircleMarker, Polyline, Popup, ScaleControl, useMap} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport React, { useState, useEffect, useCallback} from 'react';\r\n\r\nfunction MapRef(props) {\r\n\r\n  const map = useMap();\r\n  if (props.center.length !== 0) {\r\n    map.panTo(props.center[0])\r\n  }\r\n  return null\r\n}\r\n\r\nfunction CustomTileLayer(props) {\r\n  if (props.isRemote) {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"http://localhost:5000/auckland/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [initialise, setIntialise] = useState(false);\r\n  const [isRemote] = useState(false);\r\n  const [position, setPosition] = useState([]);\r\n  const [center, setCenter] = useState([-36.81835, 174.74581]);\r\n  const [points, setPoints] = useState([]);\r\n  const [lines, setLines] = useState([]);\r\n  const [host] = useState(\"localhost:5000\");\r\n  const [timerInterval] = useState(500);\r\n\r\n  const getData = useCallback(async () => {      \r\n    try {\r\n        const response = await fetch(\"http://\" + \"localhost:5000\" + '/position', {\r\n            method: 'GET',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',        \r\n            },      \r\n        });\r\n        if (response.ok) {\r\n            const body = await response.json();\r\n            return body; \r\n        } else {\r\n            \r\n            return Error(response);\r\n        }\r\n    } catch {\r\n        return new Error(\"connection error\")\r\n    }      \r\n  }, []);\r\n  \r\n\r\n  useEffect(\r\n    () => {\r\n        const id = setInterval(() => {\r\n        setCounter(counter + 1); \r\n          getData().then(data => {\r\n              if (data.latlng) {\r\n                try{\r\n                  let lat = data.latlng[0];\r\n                  let lng = data.latlng[1];\r\n                  setPosition([L.latLng(lat, lng)]);\r\n                  if (!initialise) {\r\n                    setCenter([L.latLng(lat, lng)]);\r\n                    setIntialise(true);\r\n                  }\r\n                } catch {\r\n                  console.log(\"position error\");\r\n                }     \r\n              }\r\n              if (data.faults) {\r\n                try {\r\n                    console.log(data.faults);\r\n                    setPoints(data.faults);      \r\n                } catch (e) {\r\n                  console.log(\"fault error: \" + e)\r\n                } \r\n            }    \r\n          });\r\n        }, timerInterval);\r\n        return () => {\r\n        clearInterval(id);\r\n        };\r\n    },\r\n    [counter, timerInterval, initialise, getData],\r\n);\r\n\r\nuseEffect(\r\n  () => {\r\n    if (counter % 10 === 0) {\r\n      setCenter(position);\r\n    }\r\n  },\r\n  [position, counter],\r\n);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <MapContainer \r\n            className=\"map\" \r\n            center={center} \r\n            zoom={18} \r\n            minZoom={10}\r\n            maxZoom={18}\r\n            scrollWheelZoom={true}\r\n            keyboard={true}\r\n            eventHandlers={{\r\n                load: () => {\r\n                  console.log('onload')\r\n                },\r\n              }}\r\n        >\r\n        <CustomTileLayer isRemote={isRemote}/>\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n         {position.map((position, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              stroke={true}\r\n              center={position}\r\n              radius ={6}\r\n              fill={true}\r\n              color={\"#3388ff\"}\r\n              fillColor={\"blue\"}\r\n              fillOpacity={1.0}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n                \r\n              }}\r\n              > \r\n              <Popup>Sydney</Popup>       \r\n            </CircleMarker>\r\n          )}\r\n          {points.map((point, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              center={L.latLng(point.latlng[0], point.latlng[1])}\r\n              radius ={point.radius}\r\n              fill={true}\r\n              color={point.color}\r\n              fillColor={point.color}\r\n              fillOpacity={point.opacity}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n                mouseover: (e) => {\r\n                  e.target.openPopup();\r\n                }\r\n              }}\r\n              > \r\n              <Popup\r\n                key={`marker-${idx}`}>\r\n                  id: {point.id}<br></br>\r\n              </Popup>       \r\n            </CircleMarker>\r\n          )}\r\n          {lines.map((line, idx) =>\r\n            <Polyline\r\n              positions={line.latlngs}\r\n              color={line.color}\r\n            >\r\n              \r\n            </Polyline>\r\n          )} \r\n          <MapRef center={center}></MapRef>\r\n         </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"19","severity":1,"message":"20","line":42,"column":17,"nodeType":"21","messageId":"22","endLine":42,"endColumn":25},{"ruleId":"19","severity":1,"message":"23","line":43,"column":10,"nodeType":"21","messageId":"22","endLine":43,"endColumn":14},{"ruleId":"24","severity":1,"message":"25","line":48,"column":48,"nodeType":"26","messageId":"27","endLine":48,"endColumn":49},{"ruleId":"24","severity":1,"message":"25","line":48,"column":67,"nodeType":"26","messageId":"27","endLine":48,"endColumn":68},"no-unused-vars","'setLines' is assigned a value but never used.","Identifier","unusedVar","'host' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat"]