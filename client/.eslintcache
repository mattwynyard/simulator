[{"S:\\Simulator\\Map\\client\\src\\index.js":"1","S:\\Simulator\\Map\\client\\src\\reportWebVitals.js":"2","S:\\Simulator\\Map\\client\\src\\App.js":"3","S:\\Simulator\\Map\\client\\src\\AntDrawer.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":10608,"mtime":1648425481845,"results":"8","hashOfConfig":"6"},{"size":1744,"mtime":1620686907788,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1dc9rqr",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"S:\\Simulator\\Map\\client\\src\\index.js",[],["20","21"],"S:\\Simulator\\Map\\client\\src\\reportWebVitals.js",[],"S:\\Simulator\\Map\\client\\src\\App.js",["22","23","24"],"import './App.css';\r\nimport AntDrawer from'./AntDrawer.js'\r\nimport { MapContainer, TileLayer, CircleMarker, Polyline, Popup, ScaleControl, useMap, useMapEvents, Pane} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport React, { useState, useEffect, useCallback, useRef, useImperativeHandle, forwardRef} from 'react';\r\n\r\nfunction Centreline(props) {\r\n  const redOptions = { color: 'red' }\r\n  let otherOptions = null;\r\n  let geojson = JSON.parse(props.positions.geojson);\r\n  let coords = []\r\n  geojson.coordinates.forEach(element => {\r\n      element.forEach(coord => {\r\n        let temp = coord[0];\r\n        coord[0] = coord[1];\r\n        coord[1] = temp;\r\n        coords.push(coord)\r\n      });     \r\n  });\r\n    if(props.idx % 2 === 0) {\r\n        otherOptions = { color: 'orange' }\r\n    } else {\r\n      otherOptions = { color: 'blue' }\r\n    } \r\n  //console.log(coords)\r\n  return ( <Polyline\r\n      key={`marker-${props.idx}`} \r\n      pathOptions={(props.idx === 0) ? redOptions: otherOptions}\r\n      positions={coords} \r\n      weight={3}\r\n      >\r\n    </Polyline>);\r\n}\r\n\r\nconst MapRef = forwardRef((props, ref) => {\r\n  const [center, setCenter] = useState(null);\r\n  const [bounds, setBounds] = useState(null);\r\n  const map = useMapEvents({\r\n    click: () => {\r\n      console.log(\"click\")\r\n    },\r\n    zoom: () => {\r\n      let mapBounds = map.getBounds();\r\n      setBounds(mapBounds);\r\n      setCenter(center);\r\n      if(center !== null) {\r\n        props.callback(mapBounds, center);\r\n      }\r\n    },\r\n  })\r\n  const newCenter = (center) => {\r\n    let mapBounds = map.getBounds();\r\n    setBounds(mapBounds);\r\n    setCenter(center);\r\n  };\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      newCenter: newCenter\r\n    }\r\n });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.center.length !== 0) {\r\n        map.panTo(props.center[0])\r\n      }\r\n      if(center !== null) {\r\n        props.callback(bounds, center);\r\n      }\r\n      \r\n    }, [center]);\r\n    \r\n    return null\r\n  });\r\n\r\nfunction CustomTileLayer(props) {\r\n  if (props.isRemote) {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"http://localhost:5000/auckland/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [initialise, setIntialise] = useState(false);\r\n  const [isRemote] = useState(false);\r\n  const [position, setPosition] = useState([]);\r\n  const [center, setCenter] = useState([-36.81835, 174.74581]);\r\n  const [points, setPoints] = useState([]);\r\n  const [lines, setLines] = useState([]);\r\n  const [centrelines, setCentreLines] = useState([]);\r\n  const [host] = useState(\"localhost:5000\");\r\n  const [timerInterval] = useState(500);\r\n  const mapRef = useRef(null);\r\n\r\n  const getData = useCallback(async () => {      \r\n    try {\r\n        const response = await fetch(\"http://\" + host + '/position', {\r\n            method: 'GET',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',        \r\n            },      \r\n        });\r\n        if (response.ok) {\r\n            const body = await response.json();\r\n            return body; \r\n        } else { \r\n            return Error(response);\r\n        }\r\n    } catch {\r\n        return new Error(\"connection error\")\r\n    }      \r\n  }, [host]);\r\n\r\n  const getClosestCentreline = async (center)=> {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/closestCentreline\", {\r\n          method: 'POST',\r\n          credentials: 'same-origin',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',        \r\n          },  \r\n          body: JSON.stringify({\r\n            center: center\r\n        })    \r\n      });\r\n      if (response.ok) {\r\n          const body = await response.json();\r\n    \r\n          return body; \r\n      } else {  \r\n          return Error(response);\r\n      }\r\n    } catch {\r\n        return new Error(\"connection error\")\r\n    }      \r\n  }\r\n  \r\n  const getCentrelines = async (bounds, center)=> {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/centrelines\", {\r\n          method: 'POST',\r\n          credentials: 'same-origin',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',        \r\n          },  \r\n          body: JSON.stringify({\r\n            bounds: bounds,\r\n            center: center\r\n        })    \r\n      });\r\n      if (response.ok) {\r\n          const body = await response.json();\r\n          let fp = []\r\n          for (let i = 0; i < body.data.length; i++) {\r\n              fp.push(body.data[i])\r\n          }\r\n          setCentreLines(fp)\r\n          return body; \r\n      } else {\r\n          \r\n          return Error(response);\r\n      }\r\n  } catch {\r\n      return new Error(\"connection error\")\r\n  }      \r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n        const id = setInterval(() => {\r\n          setCounter(counter + 1);\r\n          if (!initialise) { \r\n            setCenter([L.latLng(center[0], center[1])]);\r\n            setPosition([L.latLng(center[0], center[1])]);\r\n            mapRef.current.newCenter({lat: center[0], lng: center[1]})\r\n            setIntialise(true);\r\n          }\r\n          getData().then(data => {\r\n            if (data.points) {\r\n              try {\r\n                  setPoints(data.points); \r\n                  console.log(data)     \r\n              } catch (e) {\r\n                console.log(\"fault error: \" + e)\r\n              } \r\n            }\r\n            if (data.lines) {\r\n              try {\r\n                  setLines(data.lines);      \r\n              } catch (e) {\r\n                console.log(\"fault error: \" + e)\r\n              } \r\n            }   \r\n            if (data.latlng) {\r\n              try{\r\n                let lat = data.latlng[0];\r\n                let lng = data.latlng[1];\r\n                setPosition([L.latLng(lat, lng)]);             \r\n              } catch {\r\n                console.log(\"position error\");\r\n              }     \r\n            }             \r\n          });\r\n        }, timerInterval);\r\n        return () => {\r\n          clearInterval(id);\r\n        };\r\n    },\r\n    [counter, timerInterval, initialise, getData],\r\n);\r\n\r\nuseEffect(\r\n  () => {\r\n    if (counter % 10 === 0) {\r\n      setCenter(position);\r\n      if(mapRef.current !== null) {\r\n        mapRef.current.newCenter(position[0])\r\n      }      \r\n    } else {\r\n      getClosestCentreline(position);\r\n    }\r\n  },\r\n  [position, counter, mapRef],\r\n);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MapContainer \r\n          className=\"map\" \r\n          center={center} \r\n          zoom={18} \r\n          minZoom={10}\r\n          maxZoom={18}\r\n          scrollWheelZoom={true}\r\n          keyboard={true}\r\n          eventHandlers={{\r\n              load: () => {\r\n                console.log('onload')\r\n              },\r\n            }}\r\n        >\r\n        <CustomTileLayer isRemote={isRemote}/>\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n         <Pane name=\"position\" style={{ zIndex: 1000 }}>\r\n          {position.map((position, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              stroke={true}\r\n              center={position}\r\n              radius ={6}\r\n              fill={true}\r\n              color={\"#3388ff\"}\r\n              fillColor={\"blue\"}\r\n              fillOpacity={1.0}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                }, \r\n              }}\r\n              >      \r\n            </CircleMarker>\r\n          )}\r\n          </Pane >\r\n           \r\n         <Pane name=\"lines\" style={{ zIndex: 990 }}>\r\n         {lines.map((line, idx) =>\r\n            <Polyline\r\n              key={`marker-${idx}`} \r\n              style={{ zIndex: 999 }}   \r\n              positions={line.latlng}\r\n              idx={idx}\r\n              color={line.color}\r\n              weight ={line.weight}\r\n              opacity={line.opacity}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('line clicked')\r\n                },\r\n                mouseover: (e) => {\r\n                  console.log(\"mouse over\")\r\n                  e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                  e.target.closePopup();\r\n                }\r\n              }}\r\n            > \r\n            <Popup\r\n                key={`marker-${idx}`}>\r\n                  {line.id}<br></br>\r\n                  \r\n              </Popup>            \r\n            </Polyline>\r\n          )}\r\n         </Pane>\r\n         <Pane name=\"points\" style={{ zIndex: 990}}>\r\n         {points.map((point, idx) =>\r\n            <CircleMarker\r\n              key={`marker-${idx}`} \r\n              center={L.latLng(point.latlng[0], point.latlng[1])}\r\n              radius ={point.radius}\r\n              fill={point.fill}\r\n              color={point.color}\r\n              opacity={point.opacity}\r\n              fillColor={point.fillColor}\r\n              fillOpacity={point.fillOpacity}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n                mouseover: (e) => {\r\n                  e.target.openPopup();\r\n                },\r\n                mouseout: (e) => {\r\n                  e.target.closePopup();\r\n                }\r\n              }}\r\n              > \r\n              <Popup\r\n                key={`marker-${idx}`}>\r\n                  {point.id}<br></br>\r\n                  {point.fault}<br></br>\r\n              </Popup>       \r\n            </CircleMarker>\r\n          )}\r\n         </Pane >\r\n          <Pane name=\"centreline\" style={{ zIndex: 900}}>\r\n          {centrelines.map((line, idx) =>\r\n            <Centreline\r\n              key={`marker-${idx}`}    \r\n              positions={line}\r\n              idx={idx}\r\n            >           \r\n            </Centreline>\r\n          )}\r\n          </Pane>  \r\n          <MapRef ref={mapRef} center={center} callback={getCentrelines}></MapRef>  \r\n         </MapContainer>\r\n         <AntDrawer className=\"drawer\" ></AntDrawer>\r\n         \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","S:\\Simulator\\Map\\client\\src\\AntDrawer.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":3,"column":80,"nodeType":"31","messageId":"32","endLine":3,"endColumn":86},{"ruleId":"33","severity":1,"message":"34","line":72,"column":8,"nodeType":"35","endLine":72,"endColumn":16,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"37","line":227,"column":5,"nodeType":"35","endLine":227,"endColumn":50,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'useMap' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bounds', 'map', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["41"],"React Hook useEffect has a missing dependency: 'center'. Either include it or remove the dependency array. You can also do a functional update 'setCenter(c => ...)' if you only need 'center' in the 'setCenter' call.",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [bounds, center, map, props]",{"range":"47","text":"48"},"Update the dependencies array to be: [counter, timerInterval, initialise, getData, center]",{"range":"49","text":"50"},[1973,1981],"[bounds, center, map, props]",[6566,6611],"[counter, timerInterval, initialise, getData, center]"]